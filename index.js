// Generated by CoffeeScript 1.6.2
/*
Redis Tagging

The MIT License (MIT)

Copyright © 2013 Patrick Liess, http://www.tcs.de

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  var RedisInst, RedisTagging,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RedisInst = require("redis");

  RedisTagging = (function() {
    function RedisTagging(options) {
      var host, port;

      if (options == null) {
        options = {};
      }
      this.removens = __bind(this.removens, this);
      this.namespaces = __bind(this.namespaces, this);
      this.toptags = __bind(this.toptags, this);
      this.tags = __bind(this.tags, this);
      this.allids = __bind(this.allids, this);
      this.remove = __bind(this.remove, this);
      this.set = __bind(this.set, this);
      this.get = __bind(this.get, this);
      this._deleteID = __bind(this._deleteID, this);
      this.redisns = options.namespace || "rt";
      this.redisns = this.redisns + ":";
      port = options.port || 6379;
      host = options.host || "127.0.0.1";
      this.redis = RedisInst.createClient(port, host);
    }

    RedisTagging.prototype._deleteID = function(ns, id, cb) {
      var id_index, mc,
        _this = this;

      mc = [];
      id_index = ns + ':ID:' + id;
      this.redis.smembers(id_index, function(err, resp) {
        var tag, _i, _len;

        if (resp.length) {
          for (_i = 0, _len = resp.length; _i < _len; _i++) {
            tag = resp[_i];
            mc.push(['zincrby', ns + ':TAGCOUNT', -1, tag]);
            mc.push(['zrem', ns + ':TAGS:' + tag, id]);
          }
          mc.push(['del', id_index]);
          mc.push(['zremrangebyscore', ns + ':TAGCOUNT', 0, 0]);
        }
        cb(mc);
      });
    };

    RedisTagging.prototype.get = function(options, cb) {
      var ns;

      ns = this.redisns + options.bucket;
      this.redis.smembers("" + ns + ":ID:" + options.id, function(err, resp) {
        var tag, tags;

        if (err) {
          cb(err);
          return;
        }
        tags = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = resp.length; _i < _len; _i++) {
            tag = resp[_i];
            _results.push(tag);
          }
          return _results;
        })();
        cb(null, tags);
      });
    };

    RedisTagging.prototype.set = function(options, cb) {
      var id_index, ns,
        _this = this;

      ns = this.redisns + options.bucket;
      id_index = ns + ':ID:' + options.id;
      this._deleteID(ns, options.id, function(mc) {
        var tag, _i, _len, _ref;

        _ref = options.tags;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          mc.push(['zincrby', ns + ':TAGCOUNT', 1, tag]);
          mc.push(['sadd', id_index, tag]);
          mc.push(['zadd', ns + ':TAGS:' + tag, options.score, options.id]);
        }
        _this.redis.multi(mc).exec(function(err, resp) {
          cb(null, true);
        });
      });
    };

    RedisTagging.prototype.remove = function(namespace, id, callback) {
      var ns,
        _this = this;

      ns = this.redisns + namespace;
      this._deleteID(ns, id, function(mc) {
        if (mc.length) {
          _this.redis.multi(mc).exec(function(err, resp) {
            callback({
              ok: true
            });
          });
        } else {
          callback({
            ok: true
          });
        }
      });
    };

    RedisTagging.prototype.allids = function(namespace, callback) {
      var prefix;

      prefix = this.nsprefix + namespace + ':ID:';
      this.redis.keys(prefix + '*', function(err, resp) {
        var e, o, rows, _prefix_len;

        _prefix_len = prefix.length;
        rows = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = resp.length; _i < _len; _i++) {
            e = resp[_i];
            _results.push(e.substr(_prefix_len));
          }
          return _results;
        })();
        o = {
          total_rows: rows.length,
          rows: rows
        };
        callback(o);
      });
    };

    RedisTagging.prototype.tags = function(namespace, p) {
      var lastelement, mc, ns, prefix, resultkey, rndkey, tag, tagsresult, _keys;

      ns = this.nsprefix + namespace;
      p = {
        tags: p.tags,
        limit: Number(p.limit || 100),
        offset: Number(p.offset || 0),
        withscores: Number(p.withscores) || 0,
        order: p.order === "asc" ? "" : "rev",
        type: (p.type || "inter").toLowerCase(),
        callback: p.callback
      };
      prefix = ns + ':TAGS:';
      lastelement = p.offset + p.limit - 1;
      mc = [];
      if (p.tags.length > 1) {
        rndkey = ns + (new Date().getTime()) + '_' + Math.floor(Math.random() * 9999999999);
        _keys = (function() {
          var _i, _len, _ref, _results;

          _ref = p.tags;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _results.push(prefix + tag);
          }
          return _results;
        })();
        mc.push(['z' + p.type + 'store', rndkey, _keys.length].concat(_keys).concat(['AGGREGATE', 'MIN']));
        if (p.limit > 0) {
          resultkey = rndkey;
        }
      } else if (p.tags.length === 1) {
        mc.push(['zcard', prefix + p.tags[0]]);
        if (p.limit > 0) {
          resultkey = prefix + p.tags[0];
        }
      }
      if (mc.length) {
        if (p.limit > 0) {
          tagsresult = ['z' + p.order + 'range', resultkey, p.offset, lastelement];
          if (p.withscores) {
            tagsresult = tagsresult.concat(['WITHSCORES']);
          }
          mc.push(tagsresult);
        }
        if (p.tags.length > 1) {
          mc.push(['del', rndkey]);
        }
        this.redis.multi(mc).exec(function(err, resp) {
          var e, i, rows;

          if (p.limit === 0) {
            rows = [];
          } else {
            rows = resp[1];
          }
          if (rows.length && p.withscores) {
            rows = (function() {
              var _i, _len, _results;

              _results = [];
              for (i = _i = 0, _len = rows.length; _i < _len; i = _i += 2) {
                e = rows[i];
                _results.push({
                  id: e,
                  score: rows[i + 1]
                });
              }
              return _results;
            })();
          }
          p.callback({
            total_rows: resp[0],
            rows: rows,
            limit: p.limit,
            offset: p.offset
          });
        });
      } else {
        p.callback({
          "error": "Supply at least one tag"
        });
      }
    };

    RedisTagging.prototype.toptags = function(namespace, amount, callback) {
      var ns, rediskey,
        _this = this;

      ns = this.nsprefix + namespace;
      amount = Math.abs(amount) - 1;
      rediskey = ns + ':TAGCOUNT';
      this.redis.zcard(rediskey, function(err, resp) {
        var total_rows;

        total_rows = resp;
        _this.redis.zrevrange(rediskey, 0, amount, 'WITHSCORES', function(err, resp) {
          var e, i, o, rows;

          rows = (function() {
            var _i, _len, _results;

            _results = [];
            for (i = _i = 0, _len = resp.length; _i < _len; i = _i += 2) {
              e = resp[i];
              _results.push({
                tag: e,
                count: Number(resp[i + 1])
              });
            }
            return _results;
          })();
          o = {
            total_rows: total_rows,
            rows: rows
          };
          callback(o);
        });
      });
    };

    RedisTagging.prototype.namespaces = function(callback) {
      var _this = this;

      this.redis.keys(this.nsprefix + "*" + ":TAGCOUNT", function(err, resp) {
        var e, ns;

        ns = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = resp.length; _i < _len; _i++) {
            e = resp[_i];
            _results.push(e.substr(this.nsprefix.length, e.length - this.nsprefix.length - ":TAGCOUNT".length));
          }
          return _results;
        }).call(_this);
        callback({
          namespaces: ns
        });
      });
    };

    RedisTagging.prototype.removens = function(namespace, callback) {
      var _this = this;

      this.redis.keys(this.nsprefix + namespace + '*', function(err, resp) {
        if (resp.length) {
          _this.redis.del(resp, function(err, resp) {
            callback({
              ok: true,
              keys: resp
            });
          });
          return;
        }
        callback({
          ok: true,
          keys: 0
        });
      });
    };

    return RedisTagging;

  })();

  module.exports = RedisTagging;

}).call(this);
